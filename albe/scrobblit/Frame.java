/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frame.java
 *
 * Created on 18-lug-2011, 23.26.42
 */
package albe.scrobblit;

import static albe.scrobblit.Scrobblit.*;
import java.io.*;
import java.io.File.*;
import java.util.*;
import java.io.InputStreamReader.*;
import java.io.BufferedReader.* ;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import javax.swing.table.JTableHeader;
import albe.scrobblit.Dizionario.*;

/**
 *
 * @author Alberto
 */
public class Frame extends javax.swing.JFrame {

    /** Creates new form frame */
    public Frame() {        
        initComponents();
        jTrackTable = new JTrackTable();
        jScrollPane2.setViewportView(jTrackTable);
        jTrackTable.setOpaque(true);
        jTrackTable.addMouseListener(new java.awt.event.MouseListener(){
            public void mouseClicked(java.awt.event.MouseEvent e) {
                
            }
            public void mouseExited(java.awt.event.MouseEvent e)
            {

            }

            public void mousePressed(java.awt.event.MouseEvent e)
            {
            }
            public void mouseEntered(java.awt.event.MouseEvent e)
            {
                ControllaCheckBoxes();
            }
            public void mouseReleased(java.awt.event.MouseEvent e)
            {
            }
        });
        jTrackTable.getTableHeader().addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                JTableHeader source = (JTableHeader)e.getSource();
                if (source.columnAtPoint(e.getPoint())==0) {
                    boolean state = (Boolean)source.getColumnModel().getColumn(0).getHeaderValue();
                    source.getColumnModel().getColumn(0).setHeaderValue(!state);
                    if (!state)
                        jTrackTable.selectAll();
                    else jTrackTable.deselectAll();
                }
                    
                
            } 
            @Override
            public void mouseReleased(MouseEvent e) {
                ControllaCheckBoxes();
            }
        });
        jTrackTable.getTableHeader().setOpaque(false);
        jTrackTable.getTableHeader().setBorder(javax.swing.UIManager.getBorder("TableHeader.cellBorder"));
        
        try {
            javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            javax.swing.SwingUtilities.updateComponentTreeUI(this);
        }
        catch (Exception e) {
            
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scrobblit");
        setMinimumSize(new java.awt.Dimension(300, 300));
        setResizable(false);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/albe/scrobblit/scrobble.png"))); // NOI18N
        jButton4.setText(dizionario.BTscrobbla);
        jButton4.setEnabled(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setIconTextGap(10);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/albe/scrobblit/edit_deselect_all.png"))); // NOI18N
        jButton3.setText(dizionario.BTdeselezionaTutto);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/albe/scrobblit/edit_select_all.png"))); // NOI18N
        jButton2.setText(dizionario.BTselezionaTutto);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/albe/scrobblit/detect.png"))); // NOI18N
        jButton5.setText(dizionario.BTrileva);
        jButton5.setEnabled(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectTasto(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setText(dizionario.LBloggedAs+albe.scrobblit.Scrobblit.username);

        jLabel1.setText(dizionario.LBselectedTracks);

        jMenu1.setText("File");

        jMenuItem3.setText(dizionario.BTcopiaDatabase);
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopiaDatabase(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem5.setText(dizionario.BTdisconnetti);
        jMenuItem5.setEnabled(false);
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Disconnetti(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem4.setText(dizionario.BTcambiaLingua);
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SwitchLanguage(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem1.setText(dizionario.BTesci);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Esci(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(dizionario.BTaiuto);

        jMenuItem6.setText(Scrobblit.dizionario.LBcontact);
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contattaAutore(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem2.setText(dizionario.BTabout);
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Info(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 210, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel3.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        /*----------------TASTO SELEZIONA-------------*/
        jTrackTable.selectAll();
        ControllaCheckBoxes();
         
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        /*-------------TASTO DESELEZIONA---------------*/
        jTrackTable.deselectAll();
        ControllaCheckBoxes();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        /*-------------------TASTO SCROBBLA-----------------------------*/
        /*
         * nuoveTracceDaScrobblare è una nuova lista delle canzoni selezionate, mentre TracceDaScrobblare sono tutte
         * quelle che sono state rilevate.
         
        ArrayList<Track> nuoveTracceDaScrobblare = new ArrayList<Track>();
        
        for (int i=0; i<jTrackTable.getSingleSelectedIndices();i++) {   //Scansione di tutta la lista delle son selezionate                 
                for (int k=0;k<TracceDaScrobblare.get(i).getCount();k++)   //Ciclo per aggiungere count volte la stessa traccia
                    nuoveTracceDaScrobblare.add(TracceDaScrobblare.get(i));                            
        }
        
        for (int i=0;i<nuoveTracceDaScrobblare.size();i++) {              //VERIFICA TUTTE LE TRACCE
            StampaTraccia(nuoveTracceDaScrobblare.get(i));                //CHE SARANNO INVIIATE A LAST.FM
        }
        
         * 
         */
        scrobble();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void Info(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Info
        IO.print(frame, dizionario.MSabout.toString());
    }//GEN-LAST:event_Info

    private void CopiaDatabase(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopiaDatabase
        /*--------------------COPIA DATABASE--------------------------*/
        if (IO.confirm(frame,dizionario.MSdatabaseQuest)==0) {
            File Copia=new File(iTunesPath);
            File Nuovo=new File(java.lang.System.getProperty("user.home")+File.separator+"Scrobblit"+File.separator+albe.scrobblit.Scrobblit.versione+File.separator+"iTunes Music Library.xml");
            try {
                copy(Copia, Nuovo);
                IO.print(frame,dizionario.MSdatabaseSucc);
                frame.dispose();
            }
            catch (IOException e) {
                IO.err(frame,dizionario.MSerror+e.getMessage());
            }
        }
    }//GEN-LAST:event_CopiaDatabase

    private void Esci(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Esci
        frame.dispose();
    }//GEN-LAST:event_Esci

    private void SwitchLanguage(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SwitchLanguage
        if (dizionario.language.contentEquals("INGLESE")) {
             dizionario.language="ITALIANO";
             String s="";
            if (dizionario.language.equals("ITALIANO"))
                s="it";
            if (dizionario.language.equals("INGLESE"))
                s="en";
             try {
                    File file= new File(java.lang.System.getProperty("user.home")+File.separator+"Scrobblit"+File.separator+albe.scrobblit.Scrobblit.versione+File.separator+"lan.txt");
                    FileWriter scrittore= new FileWriter(file);
                    scrittore.write(s);
                    scrittore.close();
              }
              catch (IOException e) {
                    
              }
             
        }
        else {
            dizionario.language="INGLESE";
            String s="";
            if (dizionario.language.equals("ITALIANO"))
                s="it";
            if (dizionario.language.equals("INGLESE"))
                s="en";
             try {
                    File file= new File(java.lang.System.getProperty("user.home")+File.separator+"Scrobblit"+File.separator+albe.scrobblit.Scrobblit.versione+File.separator+"lan.txt");
                    FileWriter scrittore= new FileWriter(file);
                    scrittore.write(s);
                    scrittore.close();
              }
              catch (IOException e) {
                    
              }
        }
        dizionario.aggiornaLingua();
        IO.print(this, dizionario.MSriavvia);
        
    }//GEN-LAST:event_SwitchLanguage

    private void detectTasto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectTasto
        detect();
        long ore,minuti,secondi,resto;
        long durata = jTrackTable.getTotalTime()/1000;
        ore = durata/3600;
        resto = durata - ore*3600;
        minuti = resto/60;
        resto = resto - minuti*60;
        secondi = resto;
        this.jLabel3.setText(String.valueOf(ore)+":"+String.valueOf(minuti)+":"+String.valueOf(secondi));
}//GEN-LAST:event_detectTasto
    public void detect() {
        jTrackTable.azzera();
        TracceDaScrobblare = new ArrayList<Track>();
        frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        frame.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        DefaultListModel ListModel = new DefaultListModel();
        for (i=0;i<LocalTrackList.getTrackList().size();i++) {
            if      ((LocalTrackList.getTrackList().get(i).getArtista().contentEquals(
                    iTunesTrackList.getTrackList().get(i).getArtista()))       &
                    (LocalTrackList.getTrackList().get(i).getNome().contentEquals(
                    iTunesTrackList.getTrackList().get(i).getNome()))) {
                if ((!(iTunesTrackList.getTrackList().get(i).getContatore().contentEquals(""))&!(LocalTrackList.getTrackList().get(i).getContatore().contentEquals("")))&(!(iTunesTrackList.getTrackList().get(i).getContatore().contentEquals(LocalTrackList.getTrackList().get(i).getContatore())))) {
                    
                    int s=Integer.valueOf(iTunesTrackList.getTrackList().get(i).getContatore())-Integer.valueOf(LocalTrackList.getTrackList().get(i).getContatore());
                    Scrobblit.StampaTraccia(LocalTrackList.getTrackList().get(i), s);
                    for (int k=0; k<s;k++) {    //questo ciclo aggiunge s volte la stessa traccia
                        TracceDaScrobblare.add(new Track());
                        //this.jList1.getComponent(1).setVisible(true);
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setNome(LocalTrackList.getTrackList().get(i).getNome());
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setArtista(LocalTrackList.getTrackList().get(i).getArtista());
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setContatore(Integer.toString(s)); //in questo caso memorizza il numero di scrobbling al netto
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setAlbum(iTunesTrackList.getTrackList().get(i).getAlbum());
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setDataUltimoAscolto(iTunesTrackList.getTrackList().get(i).getDataUltimoAscolto());
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setDuration(iTunesTrackList.getTrackList().get(i).getDuration());
                        ListModel.addElement(LocalTrackList.getTrackList().get(i).getArtista()+" - "+LocalTrackList.getTrackList().get(i).getNome());
                    }
                }
                
            }    //FINE IF PRINIPALE (se la traccia è uguale allora...)
            
        }   //FINE FOR
        for (i=LocalTrackList.getTrackList().size()+1;i<iTunesTrackList.getTrackList().size();i++) {
            if (!(iTunesTrackList.getTrackList().get(i).getContatore().contentEquals("")))
                if (Integer.decode(iTunesTrackList.getTrackList().get(i).getContatore())>0) {
                    int s=Integer.decode(iTunesTrackList.getTrackList().get(i).getContatore());
                    for (int k=0; k<s;k++) {    //questo ciclo aggiunge s volte la stessa traccia
                        TracceDaScrobblare.add(new Track());
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setNome(iTunesTrackList.getTrackList().get(i).getNome());
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setArtista(iTunesTrackList.getTrackList().get(i).getArtista());
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setContatore(Integer.toString(s)); //in questo caso memorizza il numero di scrobbling al netto
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setAlbum(iTunesTrackList.getTrackList().get(i).getAlbum());
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setDataUltimoAscolto(iTunesTrackList.getTrackList().get(i).getDataUltimoAscolto());
                        TracceDaScrobblare.get(TracceDaScrobblare.size()-1).setDuration(iTunesTrackList.getTrackList().get(i).getDuration());
                        ListModel.addElement(iTunesTrackList.getTrackList().get(i).getArtista()+" - "+iTunesTrackList.getTrackList().get(i).getNome());
                    }
                }
                
        }
        if (TracceDaScrobblare.size()==0){
            IO.print(frame,dizionario.MSnoTracks);
            
        }
        /*_---------------ORDINA LE TRACCE IN BASE ALL'ULTIMO ASCOLTO------------------------*/
        int size = TracceDaScrobblare.size();
        boolean scambio=true;
        while(scambio) {
            scambio=false;
            for (int i=1;i<size;i++) 
                if (CreaTimeStamp(TracceDaScrobblare.get(i).getDataUltimoAscolto())<CreaTimeStamp(TracceDaScrobblare.get(i-1).getDataUltimoAscolto())) {
                    Track a = TracceDaScrobblare.get(i);
                    TracceDaScrobblare.set(i, TracceDaScrobblare.get(i-1));
                    TracceDaScrobblare.set(i-1,a);
                    scambio=true;
                } 
            i=1;
        }
        /*--------------------------------------FINE-----------------------------------*/
        
        
        jTrackTable.setLista(TracceDaScrobblare);
        jTrackTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTrackTable.selectAll();
        jTrackTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        ControllaCheckBoxes();
    }
    
    public void scrobble() {
        if (IO.confirm(frame, dizionario.MSconfirmTrack1+jTrackTable.getSelectedIndices()+dizionario.MSconfirmTrack2)==0){
            if (jTrackTable.getSelectedIndices()>50){
                int numBlocchi = (jTrackTable.getSelectedIndices()/50)+1;   
                for (int i=0; i<numBlocchi;i++) {
                    ArrayList<Track> iesimoBlocco = new ArrayList<Track>();
                    try {
                        for(int k=0;k<50;k++)     //Creo nuovo array che aggiunge elemento per elemento
                            iesimoBlocco.add(jTrackTable.getSelectedTracks().get(k+(50*i)));
                        ScrobblaTracce(iesimoBlocco);
                        
                    }
                    catch (IndexOutOfBoundsException e) {
                        ScrobblaTracce(iesimoBlocco);         //Se è stata chiamata l'eccezione vuol dire che si è superato il limite
                                                                //quindi mando le rimanenti tracce senza fare altro.
                    }
                }
            }
            else {
                ScrobblaTracce(jTrackTable.getSelectedTracks());
            }
        }
            
        if (IO.confirm(frame, dizionario.MSdatabaseQuest)==0) {
            File Copia=new File(albe.scrobblit.Scrobblit.iTunesPath);
            File Nuovo=new File(java.lang.System.getProperty("user.home")+File.separator+"Scrobblit"+File.separator+albe.scrobblit.Scrobblit.versione+File.separator+"iTunes Music Library.xml");
            try {
                copy(Copia, Nuovo);
                IO.print(frame,dizionario.MSdatabaseSucc);
                frame.dispose();
            }
            catch (IOException e) {
                IO.err(frame,dizionario.MSerror+e.getMessage());
            }
        } 
    }
    private void Disconnetti(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Disconnetti
        File filesk = new File(java.lang.System.getProperty("user.home")+File.separator+"Scrobblit"+File.separator+versione+File.separator+"sk.txt");
        boolean delete = filesk.delete();
        if (delete)
            IO.print(this, "Disconnected. Program will exit.");
        else IO.print(this, dizionario.MSerror);
        jMenuItem5.setEnabled(false);
        albe.scrobblit.Scrobblit.sk = "";
        this.dispose();
    }//GEN-LAST:event_Disconnetti

    private void contattaAutore(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contattaAutore
        Contact contact = new Contact();
        contact.setVisible(true);
    }//GEN-LAST:event_contattaAutore

    public JMenuItem getjMenuItem5() {
        return jMenuItem5;
    }
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }
    public void EnableButton(){
        this.jButton5.setEnabled(true);
    }
    
    public void ControllaCheckBoxes() {
        jLabel1.setText(Integer.toString(jTrackTable.getSelectedIndices())+dizionario.LBselectedTracks);    //aggiorna la label col num di elementi selexionati
        if (jTrackTable.isSelectionEmpty())
                jButton4.setEnabled(false);    //attiva il bottone "Scrobbla" se è stata selezionata almeno una traccia
            else jButton4.setEnabled(true);   //altrimenti lo disattiva
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
    private JTrackTable jTrackTable;
    
    public JLabel getjLabel2() {
        return jLabel2;
    }

}
